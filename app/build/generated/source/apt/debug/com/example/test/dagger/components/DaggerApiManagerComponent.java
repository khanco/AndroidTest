// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.test.dagger.components;

import com.example.test.dagger.modules.ApiMangerModule;
import com.example.test.dagger.modules.ApiMangerModule_ProvideRetrofitFactory;
import com.example.test.dagger.modules.ApiMangerModule_ProvidesServiceFactory;
import com.example.test.network.ApiManager;
import com.example.test.network.ApiManager_Factory;
import com.example.test.network.Service;
import dagger.internal.Preconditions;

public final class DaggerApiManagerComponent implements ApiManagerComponent {
  private ApiMangerModule apiMangerModule;

  private DaggerApiManagerComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApiManagerComponent create() {
    return new Builder().build();
  }

  private Service getService() {
    return Preconditions.checkNotNull(
        ApiMangerModule_ProvidesServiceFactory.proxyProvidesService(
            apiMangerModule,
            Preconditions.checkNotNull(
                ApiMangerModule_ProvideRetrofitFactory.proxyProvideRetrofit(apiMangerModule),
                "Cannot return null from a non-@Nullable @Provides method")),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.apiMangerModule = builder.apiMangerModule;
  }

  @Override
  public ApiManager apiManager() {
    return ApiManager_Factory.newApiManager(getService());
  }

  public static final class Builder {
    private ApiMangerModule apiMangerModule;

    private Builder() {}

    public ApiManagerComponent build() {
      if (apiMangerModule == null) {
        this.apiMangerModule = new ApiMangerModule();
      }
      return new DaggerApiManagerComponent(this);
    }

    public Builder apiMangerModule(ApiMangerModule apiMangerModule) {
      this.apiMangerModule = Preconditions.checkNotNull(apiMangerModule);
      return this;
    }
  }
}
