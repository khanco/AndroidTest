// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.test.screens.starcharacterdetails.dagger;

import com.example.test.screens.starcharacterdetails.mvvm.views.StarCharacterDetailsActivity;
import com.example.test.screens.starcharacterdetails.mvvm.views.StarCharacterDetailsActivity_MembersInjector;
import dagger.internal.Preconditions;

public final class DaggerCharacterDetailsComponent implements CharacterDetailsComponent {
  private CharacterDetailsModule characterDetailsModule;

  private DaggerCharacterDetailsComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CharacterDetailsComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.characterDetailsModule = builder.characterDetailsModule;
  }

  @Override
  public void inject(StarCharacterDetailsActivity activity) {
    injectStarCharacterDetailsActivity(activity);
  }

  private StarCharacterDetailsActivity injectStarCharacterDetailsActivity(
      StarCharacterDetailsActivity instance) {
    StarCharacterDetailsActivity_MembersInjector.injectViewModel(
        instance,
        Preconditions.checkNotNull(
            characterDetailsModule.provideStarCharacterDetailsViewModel(),
            "Cannot return null from a non-@Nullable @Provides method"));
    return instance;
  }

  public static final class Builder {
    private CharacterDetailsModule characterDetailsModule;

    private Builder() {}

    public CharacterDetailsComponent build() {
      if (characterDetailsModule == null) {
        this.characterDetailsModule = new CharacterDetailsModule();
      }
      return new DaggerCharacterDetailsComponent(this);
    }

    public Builder characterDetailsModule(CharacterDetailsModule characterDetailsModule) {
      this.characterDetailsModule = Preconditions.checkNotNull(characterDetailsModule);
      return this;
    }
  }
}
