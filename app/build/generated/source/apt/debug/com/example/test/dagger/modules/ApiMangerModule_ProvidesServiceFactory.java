// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.test.dagger.modules;

import com.example.test.network.Service;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class ApiMangerModule_ProvidesServiceFactory implements Factory<Service> {
  private final ApiMangerModule module;

  private final Provider<Retrofit> retrofitProvider;

  public ApiMangerModule_ProvidesServiceFactory(
      ApiMangerModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public Service get() {
    return Preconditions.checkNotNull(
        module.providesService(retrofitProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<Service> create(
      ApiMangerModule module, Provider<Retrofit> retrofitProvider) {
    return new ApiMangerModule_ProvidesServiceFactory(module, retrofitProvider);
  }

  public static Service proxyProvidesService(ApiMangerModule instance, Retrofit retrofit) {
    return instance.providesService(retrofit);
  }
}
